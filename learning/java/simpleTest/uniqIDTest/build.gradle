group 'com.samhouse'
version '1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8

// add shadow plugin
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'
}

// add jmh source in a seperate path
sourceSets {
    jmh {
        java {
            srcDir "src/jmh/java"
        }
        resources {
            srcDir "src/jmh/resources"
        }
        compileClasspath += sourceSets.test.runtimeClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath
    }
}

// define jmh dependencies
dependencies {
    jmhCompile project
    jmhCompile 'org.openjdk.jmh:jmh-core:1.19'
    jmhCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.19'
}

apply plugin: "idea"
idea {
    module {
        scopes.PROVIDED.plus  += [configurations.jmhCompile]
        scopes.PROVIDED.minus += [configurations.compile]
    }
}

// define task to run user defined jmh class
task jmhUnique(type: JavaExec, description: "Executing uniqueIDPerf benchmark") {
    classpath = sourceSets.jmh.runtimeClasspath
    main = 'net.samhouse.uniqueIDPerf'
}

task jmhPackage(dependsOn: jmhClasses) {
    apply plugin: 'com.github.johnrengelman.shadow'

    shadowJar {
        classifier = "benchmarks"

        from sourceSets.jmh.output
        from sourceSets.main.output
        from project.configurations.jmhRuntime

        manifest {
            attributes "Main-Class": "org.openjdk.jmh.Main"
        }
    }

    doLast {
        shadowJar.execute()
    }
}

task jmh(type: JavaExec, description: "Executing JMH benchmarks") {
    classpath = sourceSets.jmh.runtimeClasspath
    main = 'org.openjdk.jmh.Main'

    def include = project.properties.get('include', '');
    def exclude = project.properties.get('exclude');
    def format = project.properties.get('format', 'json');
    def profilers = project.properties.get('profilers');
    def jvmArgs = project.properties.get('jvmArgs')

    def resultFile = file("build/reports/jmh/result.${format}")

    args include
    if (exclude) {
        args '-e', exclude
    }
    args '-foe', 'true'   //fail-on-error
    args '-v', 'NORMAL'   //verbosity [SILENT, NORMAL, EXTRA]
    if (profilers) {
        profilers.split(',').each {
            args '-prof', it
        }
    }
    args '-jvmArgsPrepend', '-Xmx3072m'
    args '-jvmArgsPrepend', '-Xms3072m'
    if (jvmArgs) {
        for (jvmArg in jvmArgs.split(' ')) {
            args '-jvmArgsPrepend', jvmArg
        }
    }
    args '-rf', format
    args '-rff', resultFile

    doFirst {
        println "\nExecuting JMH with: $args \n"
        resultFile.parentFile.mkdirs()
    }
}
